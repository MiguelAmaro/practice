; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29924.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	MemCopy
PUBLIC	PrintProcAddress
PUBLIC	PrintOffset
PUBLIC	PrintInstruction
PUBLIC	HookMe
PUBLIC	Hooker
PUBLIC	MakeJumpInstruction
PUBLIC	GetAddressOffset
PUBLIC	Hook
PUBLIC	TrampJump
PUBLIC	main
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__imp_VirtualProtect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$MemCopy DD imagerel $LN8
	DD	imagerel $LN8+142
	DD	imagerel $unwind$MemCopy
$pdata$PrintProcAddress DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$PrintProcAddress
$pdata$PrintOffset DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$PrintOffset
$pdata$PrintInstruction DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$PrintInstruction
$pdata$HookMe DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$HookMe
$pdata$Hooker DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$Hooker
$pdata$MakeJumpInstruction DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$MakeJumpInstruction
$pdata$GetAddressOffset DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$GetAddressOffset
$pdata$Hook DD	imagerel $LN4
	DD	imagerel $LN4+206
	DD	imagerel $unwind$Hook
$pdata$TrampJump DD imagerel $LN3
	DD	imagerel $LN3+282
	DD	imagerel $unwind$TrampJump
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG99581 DB	'%s: %#llx', 0aH, 00H
	ORG $+5
$SG99590 DB	'%s To %s Offset: %#llx', 0aH, 00H
$SG99598 DB	'%s Intsruction: %#llx', 0aH, 00H
	ORG $+1
$SG99621 DB	'Not Hooked!', 00H
	ORG $+4
$SG99625 DB	'You''re Hooked!', 00H
	ORG $+1
$SG99676 DB	'HookMe', 00H
	ORG $+1
$SG99677 DB	'Hooker', 00H
	ORG $+1
$SG99678 DB	'HookMe ', 00H
$SG99679 DB	'GString', 00H
$SG99680 DB	'HookMe', 00H
	ORG $+1
$SG99681 DB	'Hooker', 00H
	ORG $+1
$SG99682 DB	'Hook Result: %d', 0aH, 00H
	ORG $+7
$SG99689 DB	'TrampJump', 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$MemCopy DD 011801H
	DD	04218H
$unwind$PrintProcAddress DD 010e01H
	DD	0420eH
$unwind$PrintOffset DD 011301H
	DD	04213H
$unwind$PrintInstruction DD 010e01H
	DD	0420eH
$unwind$HookMe DD 011601H
	DD	06216H
$unwind$Hooker DD 010401H
	DD	04204H
$unwind$MakeJumpInstruction DD 010d01H
	DD	0220dH
$unwind$GetAddressOffset DD 011301H
	DD	06213H
$unwind$Hook DD	021e19H
	DD	0700b720fH
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$TrampJump DD 032319H
	DD	0280111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$main DD	010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ArgCount$ = 48
Args$ = 56
main	PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 106
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 108
	mov	rdx, QWORD PTR Args$[rsp]
	mov	ecx, DWORD PTR ArgCount$[rsp]
	call	TrampJump
; Line 110
	lea	rdx, OFFSET FLAT:TrampJump
	lea	rcx, OFFSET FLAT:$SG99689
	call	PrintProcAddress
; Line 112
	xor	eax, eax
; Line 113
	add	rsp, 40					; 00000028H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
GString$ = 48
__$ArrayPad$ = 304
ArgCount$ = 336
Args$ = 344
TrampJump PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 87
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 320				; 00000140H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 88
	lea	rax, QWORD PTR GString$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 256				; 00000100H
	rep stosb
; Line 89
	lea	rdx, OFFSET FLAT:HookMe
	lea	rcx, OFFSET FLAT:$SG99676
	call	PrintProcAddress
; Line 90
	lea	rdx, OFFSET FLAT:Hooker
	lea	rcx, OFFSET FLAT:$SG99677
	call	PrintProcAddress
; Line 92
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR GString$[rsp]
	mov	edx, 8
	lea	rcx, OFFSET FLAT:HookMe
	call	MemCopy
; Line 93
	lea	rdx, OFFSET FLAT:HookMe
	lea	rcx, OFFSET FLAT:$SG99678
	call	PrintInstruction
; Line 94
	lea	rdx, QWORD PTR GString$[rsp]
	lea	rcx, OFFSET FLAT:$SG99679
	call	PrintInstruction
; Line 96
	lea	rdx, OFFSET FLAT:HookMe
	lea	rcx, OFFSET FLAT:Hooker
	call	Hook
; Line 97
	lea	rdx, OFFSET FLAT:HookMe
	lea	rcx, OFFSET FLAT:$SG99680
	call	PrintInstruction
; Line 98
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	xor	ecx, ecx
	call	HookMe
	mov	DWORD PTR Result$[rsp], eax
; Line 100
	lea	rdx, OFFSET FLAT:Hooker
	lea	rcx, OFFSET FLAT:$SG99681
	call	PrintInstruction
; Line 101
	mov	edx, DWORD PTR Result$[rsp]
	lea	rcx, OFFSET FLAT:$SG99682
	call	printf
; Line 102
	xor	eax, eax
; Line 103
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
TrampJump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
OldProtect$ = 32
ProcOffset$ = 40
JmpMem$ = 48
__$ArrayPad$ = 56
HookAddress$ = 80
HookedAddress$ = 88
Hook	PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 73
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 74
	lea	rax, QWORD PTR JmpMem$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 5
	rep stosb
; Line 75
	mov	r8d, 5
	mov	rdx, QWORD PTR HookedAddress$[rsp]
	mov	rcx, QWORD PTR HookAddress$[rsp]
	call	GetAddressOffset
	mov	QWORD PTR ProcOffset$[rsp], rax
; Line 76
	mov	eax, -1					; ffffffffH
	cmp	QWORD PTR ProcOffset$[rsp], rax
	jb	SHORT $LN2@Hook
	int	3
$LN2@Hook:
; Line 77
	mov	edx, DWORD PTR ProcOffset$[rsp]
	lea	rcx, QWORD PTR JmpMem$[rsp]
	call	MakeJumpInstruction
; Line 79
	mov	DWORD PTR OldProtect$[rsp], 0
; Line 80
	lea	r9, QWORD PTR OldProtect$[rsp]
	mov	r8d, 64					; 00000040H
	mov	edx, 5
	mov	rcx, QWORD PTR HookedAddress$[rsp]
	call	QWORD PTR __imp_VirtualProtect
; Line 81
	mov	r9d, 5
	mov	r8, QWORD PTR HookedAddress$[rsp]
	mov	edx, 5
	lea	rcx, QWORD PTR JmpMem$[rsp]
	call	MemCopy
; Line 82
	lea	r9, QWORD PTR OldProtect$[rsp]
	mov	r8d, DWORD PTR OldProtect$[rsp]
	mov	edx, 5
	mov	rcx, QWORD PTR HookedAddress$[rsp]
	call	QWORD PTR __imp_VirtualProtect
; Line 84
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
Hook	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
tv67 = 8
Result$ = 16
b$ = 24
a$ = 32
AddressA$ = 64
AddressB$ = 72
InstructionLength$ = 80
GetAddressOffset PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 64
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 65
	mov	QWORD PTR Result$[rsp], 0
; Line 66
	mov	rax, QWORD PTR AddressB$[rsp]
	cmp	QWORD PTR AddressA$[rsp], rax
	jbe	SHORT $LN3@GetAddress
	mov	rax, QWORD PTR AddressA$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@GetAddress
$LN3@GetAddress:
	mov	rax, QWORD PTR AddressB$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@GetAddress:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 67
	mov	rax, QWORD PTR AddressB$[rsp]
	cmp	QWORD PTR AddressA$[rsp], rax
	jae	SHORT $LN5@GetAddress
	mov	rax, QWORD PTR AddressA$[rsp]
	mov	QWORD PTR tv67[rsp], rax
	jmp	SHORT $LN6@GetAddress
$LN5@GetAddress:
	mov	rax, QWORD PTR AddressB$[rsp]
	mov	QWORD PTR tv67[rsp], rax
$LN6@GetAddress:
	mov	rax, QWORD PTR tv67[rsp]
	mov	QWORD PTR b$[rsp], rax
; Line 68
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR InstructionLength$[rsp]
	mov	QWORD PTR Result$[rsp], rax
; Line 69
	mov	rax, QWORD PTR Result$[rsp]
; Line 70
	add	rsp, 56					; 00000038H
	ret	0
GetAddressOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
JmpOpCode$ = 0
JmpOffset$ = 8
JmpMem$ = 32
Offset$ = 40
MakeJumpInstruction PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 55
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 56
	mov	rax, QWORD PTR JmpMem$[rsp]
	mov	QWORD PTR JmpOpCode$[rsp], rax
; Line 57
	mov	rax, QWORD PTR JmpMem$[rsp]
	inc	rax
	mov	QWORD PTR JmpOffset$[rsp], rax
; Line 58
	mov	rax, QWORD PTR JmpOpCode$[rsp]
	mov	BYTE PTR [rax], 233			; 000000e9H
; Line 59
	mov	rax, QWORD PTR JmpOffset$[rsp]
	mov	ecx, DWORD PTR Offset$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 61
	add	rsp, 24
	ret	0
MakeJumpInstruction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Hooker	PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 48
$LN3:
	sub	rsp, 40					; 00000028H
; Line 49
	lea	rcx, OFFSET FLAT:$SG99625
	call	printf
; Line 52
	add	rsp, 40					; 00000028H
	ret	0
Hooker	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
Padding$ = 36
More$ = 40
a$ = 64
b$ = 72
c$ = 80
d$ = 88
HookMe	PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 38
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 39
	lea	rcx, OFFSET FLAT:$SG99621
	call	printf
; Line 40
	mov	DWORD PTR Result$[rsp], 0
; Line 41
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Padding$[rsp], eax
; Line 42
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR Padding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR More$[rsp], eax
; Line 43
	mov	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR Result$[rsp], eax
; Line 44
	imul	eax, DWORD PTR More$[rsp], 0
	mov	ecx, DWORD PTR Result$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 45
	add	rsp, 56					; 00000038H
	ret	0
HookMe	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Label$ = 48
Address$ = 56
PrintInstruction PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 29
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 31
	mov	rax, QWORD PTR Address$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR Label$[rsp]
	lea	rcx, OFFSET FLAT:$SG99598
	call	printf
; Line 33
	add	rsp, 40					; 00000028H
	ret	0
PrintInstruction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Label$ = 48
TargetLabel$ = 56
Offset$ = 64
PrintOffset PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 23
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 24
	mov	r9, QWORD PTR Offset$[rsp]
	mov	r8, QWORD PTR TargetLabel$[rsp]
	mov	rdx, QWORD PTR Label$[rsp]
	lea	rcx, OFFSET FLAT:$SG99590
	call	printf
; Line 26
	add	rsp, 40					; 00000028H
	ret	0
PrintOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Label$ = 48
Address$ = 56
PrintProcAddress PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 17
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 18
	mov	r8, QWORD PTR Address$[rsp]
	mov	rdx, QWORD PTR Label$[rsp]
	lea	rcx, OFFSET FLAT:$SG99581
	call	printf
; Line 20
	add	rsp, 40					; 00000028H
	ret	0
PrintProcAddress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
At$1 = 0
tv65 = 8
MaxSize$ = 16
Src$ = 48
SrcSize$ = 56
Dest$ = 64
DestSize$ = 72
MemCopy	PROC
; File F:\Dev\Practice\hooks\src\main.c
; Line 10
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11
	mov	rax, QWORD PTR DestSize$[rsp]
	cmp	QWORD PTR SrcSize$[rsp], rax
	jae	SHORT $LN6@MemCopy
	mov	rax, QWORD PTR SrcSize$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN7@MemCopy
$LN6@MemCopy:
	mov	rax, QWORD PTR DestSize$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN7@MemCopy:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR MaxSize$[rsp], rax
; Line 12
	mov	QWORD PTR At$1[rsp], 0
	jmp	SHORT $LN4@MemCopy
$LN2@MemCopy:
	mov	rax, QWORD PTR At$1[rsp]
	inc	rax
	mov	QWORD PTR At$1[rsp], rax
$LN4@MemCopy:
	mov	rax, QWORD PTR MaxSize$[rsp]
	cmp	QWORD PTR At$1[rsp], rax
	jae	SHORT $LN3@MemCopy
	mov	rax, QWORD PTR At$1[rsp]
	mov	rcx, QWORD PTR Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR At$1[rsp]
	mov	rdx, QWORD PTR Src$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@MemCopy
$LN3@MemCopy:
; Line 14
	add	rsp, 40					; 00000028H
	ret	0
MemCopy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
